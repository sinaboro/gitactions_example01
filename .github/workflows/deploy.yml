name: Deploy To EC2                      # 워크플로우 이름 (GitHub Actions UI에서 표시됨)

on:                                      # 워크플로우 실행 조건
  push:                                  # push 이벤트가 발생했을 때
    branches:                            # 특정 브랜치에서만 실행
      - main                             # main 브랜치에 push 되었을 때 실행됨

jobs:                                    # 실행할 Job 정의
  deploy:                                # Job 이름: deploy
    runs-on: ubuntu-latest               # 실행 환경: 최신 Ubuntu 가상머신에서 실행
    steps:                               # Job 내부에서 실행할 단계 정의
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4        # 현재 저장소 코드를 GitHub Actions 환경으로 가져오기

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4      # JDK 설치 액션 사용
        with:
          distribution: temurin          # AdoptOpenJDK(Temurin) 배포판 사용
          java-version: 17               # 자바 17 버전 설치

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml
        # GitHub Secrets에 저장된 APPLICATION_PROPERTIES 값을 application.yml 파일로 생성

      - name: 권한설정
        run: chmod +x gradlew            # gradlew(Gradle Wrapper)에 실행 권한 부여

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build -x test
        # Gradle로 클린 빌드 실행 (테스트는 제외)

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
        # 빌드 결과물(SNAPSHOT.jar)을 project.jar로 이름 변경

      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts
        # 배포할 파일들(project.jar, appspec.yml, scripts 폴더)을 tar.gz로 압축
        # $GITHUB_SHA는 현재 커밋 ID → 버전 관리에 유용

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2                     # AWS 리전 (서울)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}       # GitHub Secrets에 저장된 AWS 접근 키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secrets에 저장된 AWS 비밀 키

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://instagram-server22/$GITHUB_SHA.tar.gz
        # 압축한 파일을 S3 버킷(instagram-server22)에 업로드

      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
        run: aws deploy create-deployment
          --application-name instagram-server
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name Production
          --s3-location bucket=instagram-server22,bundleType=tgz,key=$GITHUB_SHA.tar.gz
        # AWS CodeDeploy를 이용해 EC2에 배포 실행
        # - application-name: CodeDeploy 애플리케이션 이름
        # - deployment-config-name: 배포 방식 (AllAtOnce = 한 번에 배포)
        # - deployment-group-name: 배포 그룹 (Production)
        # - s3-location: S3에서 가져올 배포 파일 위치 (bucket, 파일 형식, key 지정)
